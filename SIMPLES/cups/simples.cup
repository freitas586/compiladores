/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;

parser code {:

    public String SCOPE;

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", column " + (s.right + 1));
            }
        }

        m.append(" : " + message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    class TabelaSimbolo {
        private String tipo;
        private String tamanho;
        private boolean EhVetor;
        private String scope;

        TabelaSimbolo(String tipo, boolean EhVetor) {
            this.tipo = tipo;
            this.EhVetor = EhVetor;
            this.scope = SCOPE;
        }

        TabelaSimbolo(String tipo, boolean EhVetor, String tamanho) {
            this.tipo = tipo;
            this.EhVetor = EhVetor;
            this.tamanho = tamanho;
            this.scope = SCOPE;
        }

        TabelaSimbolo(String tipo, boolean EhVetor, String tamanho, String scope) {
            this.tipo = tipo;
            this.EhVetor = EhVetor;
            this.tamanho = tamanho;
            this.scope = scope;
        }

        public String getTipo() {
            return tipo;
        }

        public boolean getEhVetor() {
            return EhVetor;
        }

        public String getTamanho() {
            return tamanho;
        }

        public String getScope() {
            return scope;
        }
    }

    private Hashtable<String, TabelaSimbolo> dicionario = new Hashtable<>();
    Stack<String> pilhaAuxiliar = new Stack<>();
    private int pos = 0;
    String v1, v2;

    public void emit_header() {
        System.out.print("#include <stdio.h>\n");
        System.out.print("#include <stdlib.h>\n");
    }

    public void emit_program() {
        System.out.print("\nint main()");
    }

    public void emit_start_block() {
        System.out.print("{");
        indent_code(pos++);
        System.out.print("\n");
    }

    public void emit_end_block() {
        indent_code(--pos);
        System.out.print("}\n");
    }

    public void emit_return() {
        indent_code(pos);
        System.out.print("return 0;\n");
    }

    public void emit_semi() {
        System.out.print(";\n");
    }

    public void emit_declaracao_variavel_com_atribuicao(String id, String tipo, String value) {
        indent_code(pos);
        if (dicionario.containsKey(id)) {
            String v = dicionario.get(id).getScope();
            if (v.equals(SCOPE))
                report_fatal_error("emit_declaracao_variavel_com_atribuicao: Variável Duplicada [" + id + "] in function [" + SCOPE + "]", null);
        }
        if (tipo.equals("INT")) {
            System.out.print("int " + id + " = " + value + ";\n");
        } else {
            System.out.print("float " + id + " = " + value + ";\n");
        }

        dicionario.put(id, new TabelaSimbolo(tipo, false, "0", SCOPE));
    }

    public void emit_declaracao_variavel(String id, String tipo) {
        indent_code(pos);

        if (dicionario.containsKey(id)) {
            String value = dicionario.get(id).getScope();
            if (value.equals(SCOPE))
                report_fatal_error("emit_declaracao_variavel: Variável duplicada [" + id + "] in function [" + SCOPE + "]", null);
        }

        if (tipo.equals("INT")) {
            System.out.print("int " + id );
        } else {
            System.out.print("float " + id);
        }

        dicionario.put(id, new TabelaSimbolo(tipo, false, "0", SCOPE));
    }

    public void emit_atribuicao(String id, String value) {
        checar_Variavel_Nao_Declarada(id);
        System.out.print(id + " = " + value + ";\n");
    }

    public void emit_escreva(String id) {
        indent_code(pos);
        TabelaSimbolo t1 = dicionario.get(id);
        if (t1 == null) {
            report_fatal_error("Variável não declarada [" + id + "]", null);
        }

        String tipo = t1.getTipo();
        if (tipo.equals("INT")) {
            System.out.print("printf(\"%d\", " + id + ");\n");
        } else {
            System.out.print("printf(\"%f\", " + id + ");\n");
        }
    }

    public void emit_escreva_texto(String text) {
        indent_code(pos);
        System.out.print("printf(" + text + ");\n");
    }

    public void emit_leia(String id) {
        indent_code(pos);
        checar_Variavel_Nao_Declarada(id);
        TabelaSimbolo t1 = dicionario.get(id);

        String tipo = t1.getTipo();

        if (tipo.equals("INT")) {
            System.out.print("scanf(\"%d\", &" + id + ");\n");
        } else {
            System.out.print("scanf(\"%f\", &" + id + ");\n");
        }
    }

    public void emit_if(String value) {
        indent_code(pos);
        System.out.print("if (" + value + ") ");
    }

    public void emit_else() {
        indent_code(pos);
        System.out.print("else ");
    }

    public void emit_for(String id, String n1, String n2, String n3) {
        indent_code(pos);
        TabelaSimbolo t1 = dicionario.get(id);
        int passo = Integer.parseInt(n3);

        if (t1 == null) {
            report_fatal_error("Variável não declarada [" + id + "]", null);
        } else if (passo >= 0) {
            System.out.print("for (" + id + " = " + n1 + "; " + id + " < " + n2 + "; " + id + " += " + n3 + ") ");
        } else {
            System.out.print("for (" + id + " = " + n1 + "; " + id + " > " + n2 + "; " + id + " += " + n3 + ") ");
        }
    }

    public void emit_while(String value) {
        indent_code(pos);
        System.out.print("while (" + value + ") ");
    }

    public void indent_code(int pos) {
        for (int i = 0; i < pos * 3; i++) {
            System.out.print(" ");
        }
    }


    public String checkExpr(String e1, String e2){   
        String tipoE1 = "", tipoE2 = "";  
        
        String e1aux, e2aux;
        e1aux = e1; e2aux = e2; 

        if(e1 != null){

          if(e1.contains("[")){ e1 = e1.substring(0,e1.indexOf('[')); }

          checar_Variavel_Nao_Declarada(e1);
          checar_Uso_Correto_Vetores(e1aux);

           TabelaSimbolo t1 = dicionario.get(e1);  
           if(t1 != null)
              tipoE1 = t1.getTipo(); 

            if(e2 != null){
               if(e2.contains("[")){ e2 = e2.substring(0,e2.indexOf('[')); }
               checar_Variavel_Nao_Declarada(e2);
               checar_Uso_Correto_Vetores(e2aux);

               TabelaSimbolo t2 = dicionario.get(e2);  
               if(t2 != null) {
                  tipoE2 = t2.getTipo(); 
               }

              
            }

        }

        if(! tipoE2.equals("")){

            if(! tipoE1.equals(tipoE2)){
                report_fatal_error("Language does not allow operations with different types!",null);
            }
        }

        return tipoE1;
    }


        public void emit_escreval(String id) {
        indent_code(pos);
        TabelaSimbolo t1 = dicionario.get(id);
        if (t1 == null) {
            report_fatal_error("Variável não declarada [" + id + "]", null);
        }
        String tipo = t1.getTipo();
        if (tipo.equals("INT")) {
            System.out.print("printf(\"%d\\n\", " + id + ");\n");
        } else {
            System.out.print("printf(\"%f\\n\", " + id + ");\n");
        }
    }

    public void emit_escreval_texto(String text) {
        indent_code(pos);
        System.out.print("printf(\"%s\\n\", " + text + ");\n");
    }

    public void emit_atribuicao_vetor(String id, String tamanho, String expressao) {
        indent_code(pos);
        checar_Variavel_Nao_Declarada(id);
        System.out.print(id + "[" + tamanho + "] = " + expressao + ";\n");
    }

    public void emit_declaracao_vetor(String tipo, String id, String tamanho) {
        indent_code(pos);
        if (dicionario.containsKey(id)) {
            String value = dicionario.get(id).getScope();
            if (value.equals(SCOPE))
                report_fatal_error("emit_declaracao_vetor: Variável duplicada [" + id + "] in function [" + SCOPE + "]", null);
        }

        if (tipo.equals("INT")) {
            System.out.print("int " + id + "[" + tamanho + "];\n");
        } else {
            System.out.print("float " + id + "[" + tamanho + "];\n");
        }

        dicionario.put(id, new TabelaSimbolo(tipo, true, tamanho, SCOPE));
    }

    public void checar_Variavel_Nao_Declarada(String id) {
        if (id.contains("[")) {
            id = id.substring(0, id.indexOf('['));
        }

        if (!dicionario.containsKey(id)) {
            report_fatal_error("Variável não declarada [" + id + "]", null);
        }
    }

    public void checar_Uso_Correto_Vetores(String id) {
        String idaux = id;
        if (id.contains("[")) {
            id = id.substring(0, id.indexOf('['));
        }

        if (!dicionario.containsKey(id)) {
            report_fatal_error("checar uso correto dos vetores: Variável não declarada [" + id + "]", null);
        }

        TabelaSimbolo t1 = dicionario.get(id);
        if (t1 != null && t1.getEhVetor() && !idaux.contains("[")) {
            report_fatal_error("Using array without index [" + id + "]", null);
        }
    }

    public void emit_parameter_declaration(String id) {
        checar_Variavel_Nao_Declarada(id);
        System.out.print(id.trim());
    }

:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Terminals (tokens returned by the scanner). */
terminal            PLUS, MINUS, TIMES, DIVIDE,  LPAREN, RPAREN, LBRCKT, RBRCKT, EQUALS, GREATER,LESS, PROGRAM, STARTPRG, ENDPRG, READLINE, WRITELINE,DECLINT,DECLFLOAT, E, OU, NAO;
terminal            IFF, SEMI, THENN,  ELSEE, ENDELSE, ATTRIB, PARA, DE, ATE, PASSO, FACA, FIMPARA, ENQUANTO, FIMENQUANTO,PROCEDURE, COMMA, RETURN, RETURN_TYPE, VOID;
terminal String	    ID;
terminal String     INTT;      
terminal String     FLOATT;
terminal String     TEXTO;
terminal String     ESCREVAL;


/* Non terminals */
non terminal     program, list_command, command, assign , declare_variable, writel, readl,if,    elsepart,  
                 for, while,writen,assignment_types, array_assignment_types,parameter_list, parameter, 
                 return_function, return_type, function_call, call_parameter_list, call_parameter,   return_function_type,function_list,function,header;
non terminal String    expr,tipo,vetor;      

/* Precedences */
precedence left EQUALS;
precedence left GREATER, LESS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LPAREN, RPAREN;
precedence left LBRCKT, RBRCKT; 
precedence left E, OU, NAO;



/* The grammar rules */
header ::= {: emit_header(); System.out.print("\n\n"); :}
           program
           ;
program ::= function_list
            PROGRAM        {: SCOPE="MAIN"; emit_program(); :}  
            STARTPRG       {: emit_start_block(); :} 
            list_command   
            ENDPRG         {: emit_end_block(); :}
            ;

/* Functions */
function_list ::= function_list function
                  | /* empty */
                  ;

function    ::= PROCEDURE 
                return_type
                ID:name {: SCOPE=name; System.out.print(name); :}
                LPAREN  {: System.out.print("("); :}
                parameter_list
                RPAREN  {: System.out.print(")"); :}
                STARTPRG {: emit_start_block(); :}
                list_command
                ENDPRG  {: emit_end_block(); System.out.print("\n\n"); :}
            ;

/* Parameters */
parameter_list ::= parameter_list parameter
                   | /* empty */
                   ;

parameter ::= tipo:t 
              ID:id {: emit_declaracao_variavel(id, t); :}
              COMMA {: System.out.print(", "); :}
              |
              tipo:t 
              ID:id {: emit_declaracao_variavel(id, t); :}
              ;

/* Function Calls */
call_parameter_list ::= call_parameter_list call_parameter
                  | /* empty */
                  ;

call_parameter ::= expr:c {: emit_parameter_declaration(c); :}
                   COMMA  {: System.out.print(","); :}
                   |
                   expr:c {: emit_parameter_declaration(c); :}
                   | VOID
                   ;

function_call ::= ID:i 
                  LPAREN {: indent_code(pos); System.out.print(i + "("); :}
                  call_parameter_list
                  RPAREN {: System.out.print(")"); :}
                  SEMI   {: emit_semi(); :}
                  ;

/* Return Statements */
return_function ::= RETURN {: indent_code(pos); System.out.print("return "); :}
                    return_function_type 
                    SEMI   {: System.out.print(";\n"); :}
                    ;

return_function_type ::= expr:e {: System.out.print(e); :}
                         |
                         VOID
                         |
                         ID:i
                         LPAREN {: System.out.print(i + "("); :}
                         call_parameter_list
                         RPAREN {: System.out.print(")");     :}
                         ;


/* Commands */
list_command ::= list_command command 
            |  /* empty */
            ;


command ::=    declare_variable 
            |  assign
            |  readl
            |  writel
            |  if
            |  for
            |  while    
            |  writen   
            |  return_function
            |  function_call       
            ;


/* Types */
return_type ::=     DECLINT          {: RESULT = "INT" ;  System.out.print("int ");   :}
                  | DECLFLOAT        {: RESULT = "FLOAT"; System.out.print("float "); :}
                  | VOID             {: RESULT = "VOID";  System.out.print("void ");  :}  
                  ;

tipo ::=      DECLINT:t   {: RESULT = "INT"  ;     :}
            | DECLFLOAT:t {: RESULT = "FLOAT";     :}
            ;

/* Vetor */
vetor      ::= ID:i LBRCKT INTT:z RBRCKT            {: RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); :}
               | ID:i LBRCKT expr:z RBRCKT          {: RESULT = i + "["+z+"]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); :}
            ;

/* Variable Declarations */
declare_variable ::= tipo:t  ID:id 
                      ATTRIB
                      expr:value    {: emit_declaracao_variavel_com_atribuicao(id,  t,  value); :}
                      SEMI          {: emit_semi();  :}                    
                     | 
                       tipo:t ID:id {: emit_declaracao_variavel(id,t);  :} 
                       SEMI         {: emit_semi();  :}
                     |
                       tipo:t vetor {: emit_declaracao_vetor(t, pilhaAuxiliar.pop(), pilhaAuxiliar.pop()); pilhaAuxiliar.clear(); :}
                       SEMI         {: emit_semi();  :}
                     ;

/* Assignments */
assign ::= ID:id 
               ATTRIB            {: indent_code(pos); System.out.print(id + "="); :}
               assignment_types         
               SEMI              {: emit_semi(); :} 
               | 
               vetor             {: v1 = pilhaAuxiliar.pop(); v2 = pilhaAuxiliar.pop(); pilhaAuxiliar.clear(); :}
               ATTRIB            {: indent_code(pos); System.out.print(v1 + "[" + v2 + "]=" ); :}  
               array_assignment_types
               SEMI              {: emit_semi(); :} 
               ;                                 

assignment_types ::= expr:value {: System.out.print(value); :}
                   | ID:i 
                     LPAREN {: System.out.print(i + "("); :}
                     call_parameter_list
                     RPAREN {: System.out.print(")"); :}   
                   ;

array_assignment_types ::= expr:e {: emit_atribuicao_vetor(v1, v2, e); pilhaAuxiliar.clear();  :} 
                         | ID:i 
                           LPAREN {: System.out.print(i + "("); :}
                           call_parameter_list
                           RPAREN {: System.out.print(")"); :}   
                         ;


/* I/O Statements */                                                           
writel      ::= WRITELINE
                expr:value {: emit_escreva(value);  :}                                                   
                SEMI       {: emit_semi();          :}
                | 
                WRITELINE
                LPAREN 
                TEXTO:t{:emit_escreva_texto(t);:}
                RPAREN
                SEMI {: emit_semi();:}
            ;

writen     ::=  ESCREVAL
                expr:value {: emit_escreval(value);  :}                                                   
                SEMI       {: emit_semi();          :}
                | 
                ESCREVAL
                LPAREN 
                TEXTO:t{:emit_escreval_texto(t);:}
                RPAREN
                SEMI {: emit_semi();:}
            ;

readl      ::= READLINE 
               expr:id       {: emit_leia(id); :}
               SEMI          {: emit_semi();:}
            ;

/* Control Flow */
if          ::= IFF 
                expr:value    {: emit_if(value);   :}
                THENN         {: emit_start_block();  :}
                list_command
                elsepart  
                ENDELSE       {: emit_end_block();       :}
                ;

elsepart      ::=  ELSEE      {: emit_end_block(); emit_else(); emit_start_block(); :}
                   list_command
                   | /* empty */
                   ;

for         ::= PARA ID:id DE expr:n1 ATE expr:n2 PASSO expr:n3 FACA {: emit_for(id,n1,n2,n3); emit_start_block();  :}
                list_command
                FIMPARA {:  emit_end_block(); :}
            ;

while       ::= ENQUANTO expr:value {: emit_while(value); :}
                FACA                {: emit_start_block();  :}
                list_command
                FIMENQUANTO         {:  emit_end_block(); :}
            ;                                                       
                                                                                         
/* Expressions */                                                 
expr     ::= expr:e1 PLUS expr:e2         {: RESULT =  e1 + "+" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
	       | expr:e1 MINUS expr:e2         {: RESULT =  e1 + "-" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | expr:e1 TIMES expr:e2         {: RESULT =  e1 + "*" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}  
	       | expr:e1 DIVIDE expr:e2        {: RESULT =  e1 + "/" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}  
          | expr:e1 EQUALS expr:e2        {: RESULT =  e1 + "==" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | expr:e1 GREATER expr:e2       {: RESULT =  e1 + ">" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | expr:e1 LESS expr:e2          {: RESULT =  e1 + "<" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | expr:e1 E expr:e2             {: RESULT =  e1 + "&&" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | expr:e1 OU expr:e2            {: RESULT =  e1 + "||" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); :}
          | NAO expr:e1                   {: RESULT =   "!" + e1;    ;                    :}
          | MINUS expr:e1                 {: RESULT =   "-" + e1;    ;                    :}
          | LPAREN  
             expr:e1                      {: RESULT =  "(" + e1  + ")"; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,null),false));:} 
             RPAREN   
          | ID:i                          {: RESULT = i;  /* detectar variavel nao declarada */ checkExpr(i,null);             :}
          | INTT: n                       {: RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("INT",false));               :}
          | FLOATT:n                      {: RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("FLOAT",false));             :}
          | vetor: v                      {: RESULT = v;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(v, null), true));  :} 
           ;
           