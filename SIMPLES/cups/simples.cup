/* ----------------------Seção de Declarações Preliminares--------------------*/

/* Importa as classes da biblioteca java_cup.runtime */
import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;

/* Código do Parser em Java */
parser code {:

    public String ESCOPO; 

    
    public void report_error(String mensagem, Object info) {
        StringBuilder m = new StringBuilder("Erro");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" na linha "+(s.left+1));
                if (s.right >= 0)
                    m.append(", coluna "+(s.right+1));
            }
        }
        m.append(" : "+mensagem);
        System.err.println(m);
    }

    // Método para reportar erros fatais e encerrar a compilação
    public void report_fatal_error(String mensagem, Object info) {
        report_error(mensagem, info);
        System.exit(1);
    }

    // Classe interna para a Tabela de Símbolos
    class TabelaSimbolos {
        private String tipo;
        private String tamanho;
        private boolean ehVetor;
        private String escopo;

        TabelaSimbolos(String tipo, boolean ehVetor, String tamanho, String escopo){
            this.tipo = tipo;
            this.ehVetor = ehVetor;
            this.tamanho = tamanho;
            this.escopo = ESCOPO;
        }

        public String getTipo() { return tipo; }
        public boolean getEhVetor() { return ehVetor; }
        public String getTamanho() { return tamanho; }
        public String getEscopo() { return escopo; }
    }

    
    private Hashtable<String, TabelaSimbolos> dicionario = new Hashtable<String, TabelaSimbolos>();
     Deque<String> pilhaAuxiliar = new ArrayDeque<String>();
    private int pos = 0; // Controla a indentação do código gerado
    String v1, v2; 

    /* Métodos para emitir código em C */

    public void emitirCabecalho() {
        System.out.print("#include <stdio.h>\n");
        System.out.print("#include <stdlib.h>\n");
    }

    public void emitirPrograma() {
        System.out.print("\nint main()");
    }

    public void emitirInicioBloco() {
        System.out.print("{");
        indentarCodigo(pos++);

    }

    public void emitirFimBloco() {
        indentarCodigo(--pos);
        System.out.print("}");
        System.out.print("\n");
    }

    public void emitirRetorno() {
        indentarCodigo(pos);
        System.out.print("return 0;\n");
    }

    public void emitirPontoEVirgula() {
        System.out.print(";\n");
    }

    public void emit_Declaracao_Variavel_Com_Atribuicao(String id, String tipo, String value) {
        indentarCodigo(pos);
        
        if(dictionary.containsKey(id)){
          String v = dicionario.get(id).getEscopo();
          if(v.equals(ESCOPO))
            report_fatal_error("emit_Declaracao_Variavel: Variavel Duplicada  [" + id + "] na funcao [" + ESCOPO + "]",null);
       }

          
        if(tipo.equals("INT")) {
            System.out.print("int " + id + "=" + value);
        } else {
            System.out.print("float " + id + "=" + value);
        }

        dicionario.put(id, new TabelaSimbolos(tipo,false,"0",ESCOPO));                                  
       
    }

    public void emitirDeclaracaoVetor(String tipo, String id, String tamanho) {
        indentarCodigo(pos);
        if(dicionario.containsKey(id)){
          String value = dicionario.get(id).getEscopo();
          if(value.equals(ESCOPO))
            report_fatal_error("emit_Declaracao_Variavel[" + id + "] na funcao [" + ESCOPO + "]",null);
       }



        if(tipo.equals("INT")) {
            System.out.print("int " + id + "[" + size + "]");
        } else {
            System.out.print("float "  + id + "[" + size + "]");
        }

         dicionario.put(id, new TabelaSimbolos(tipo,true,tamanho,ESCOPO));  
      
    }

    public void emit_parametro_declaracao(String id){

      verificarVariavelNaoDeclarada(id);
      System.out.print(id.trim()); 

     
      
    }
    
    public void emitirDeclaracaoVariavel(String id, String tipo) {
        indentarCodigo(pos);

        if(dicionario.containsKey(id)){
          String value = dicionario.get(id).getEscopo();
          if(value.equals(ESCOPO))
            report_fatal_error("emit_declaraco_variavel: Variavel Duplicada [" + id + "] na funcap [" + ESCOPO + "]",null);
       }


        if(tipo.equals("INT")) {
            System.out.print("int " + id);
        } else {
            System.out.print("float " + id);
        }

        dicionario.put(id, new TabelaSimbolos(tipo,false,"0", ESCOPO));
      
    }

    public void emitirAtribuicaoVetor(String id, String tamanho, String expr) {
        indentarCodigo(pos);
        verificarVariavelNaoDeclarada(id);
        System.out.print(id + "[" + indice + "] = " + expr);
    }

    public void emitirAtribuicao(String id, String value) {
        indentarCodigo(pos);
        verificarVariavelNaoDeclarada(id);
        System.out.print(id + " = " + value);
    }

    public void emitirEscreva(String id) {
        indentarCodigo(pos);
        verificarVariavelNaoDeclarada(id);

        TabelaSimbolos t1 = dicionario.get(id);  
       String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
           System.out.print("printf(\"\\n%d\"," + id + ")") ;
         } else {
            System.out.print("printf(\"\\n%f\"," + id + ")") ;
         }   
      }

    public void emitirLeia(String id) {
        indentarCodigo(pos);
        verificarVariavelNaoDeclarada(id);
        
        String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
            System.out.print("scanf(\"%d\",&" + id + ")") ;
         } else {
            System.out.print("scanf(\"%f\",&" + id + ")");
         }   
      }

    public void emitirSe(String value) {
        indentarCodigo(pos);
        System.out.print("if(" + value + ")");
    }

    public void emitirSenao() {
        indentarCodigo(pos);
        System.out.print("else");
    }

    public void emitirPara(String id, String n1, String n2, String n3) {
        indentarCodigo(pos);
        verificarVariavelNaoDeclarada(id);
        int passo = Integer.parseInt(n3);

        if(psso >= 0) 
          System.out.print("for("+ id +" = "+ n1 +";"+ id +" < "+ n2 +";"+ id+ " += "+ n3 +")");
        else 
         System.out.print("for("+ id +" = "+ n1 +";"+ id +" > "+ n2 +";"+ id+ " += "+ n3 +")");
      
    }


    public void emitirEnquanto(String value) {
        indentarCodigo(pos);
        System.out.print("while(" + value + ")");
    }

    /* Métodos Auxiliares */
    public String verificarExpr(String e1, String e2) {
        String tipoE1 = "", tipoE2 = "";
        String e1aux = e1, e2aux = e2;

        if (e1 != null) {
            if (e1.contains("[")) e1 = e1.substring(0, e1.indexOf('['));
            verificarVariavelNaoDeclarada(e1);
            verificarUsoCorretoVetor(e1aux);
            TabelaSimbolos t1 = dicionario.get(e1);
            if (t1 != null) tipoE1 = t1.getTipo();

            if (e2 != null) {
                if (e2.contains("[")) e2 = e2.substring(0, e2.indexOf('['));
                verificarVariavelNaoDeclarada(e2);
                verificarUsoCorretoVetor(e2aux);
                TabelaSimbolos t2 = dicionario.get(e2);
                if (t2 != null) tipoE2 = t2.getTipo();
            }
        }

        if (!tipoE2.isEmpty() && !tipoE1.equals(tipoE2)) {
            report_fatal_error("A linguagem não permite operações com tipos diferentes!", null);
        }
        return tipoE1;
    }

    public void indentarCodigo(int pos) {
        for (int i = 0; i < pos * 3; i++) {
            System.out.print(" ");
        }
    }

    public void verificarVariavelNaoDeclarada(String id) {
        if (id.contains("[")) {
            id = id.substring(0, id.indexOf('['));
        }
        if (!dicionario.containsKey(id)) {
            report_fatal_error("checar variavel nao declarada: Variavel Duplicada [" + id + "] na funcao [" + ESCOPO + "]",null);
        }
    }

    public void verificarUsoCorretoVetor(String id) {
        String idaux = id;
        if (id.contains("[")) {
            id = id.substring(0, id.indexOf('['));
        }

        if(! dicionario.containsKey(id)){
          String v = dicionario.get(id).getEscopo();
          if(v.equals(ESCOPO))
            report_fatal_error("checar uso correto do vetor: Variavel duplicada [" + id + "] na funcao [" + ESCOPO + "]",null);
       }

      TabelaSimbolos t1 = dicionario.get(id);

    
      if(t1 != null){
        if(t1.getEhVetor() == true && (! idaux.contains("["))){
             report_fatal_error("usando vetor sem index[" + id + "]",null);
        }
      }

    }

:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner) */
terminal            PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, LBRACKET, RBRACKET, EQUALS, GREATER, LESS, 
                    PROGRAM, STARTPRG, ENDPRG, READLINE, WRITELINE, DECLINT, DECLFLOAT, 
                    E, OU, NAO;
terminal            IFF, SEMI, THENN, ELSEE, ENDELSE, ATTRIB, ASSIGN, PARA, DE, ATE, PASSO, FACA, ENQUANTO, FIMENQUANTO 
                     PROCEDURE, COMMA, RETURN, RETURN_TYPE, COLON, VOID;
terminal String     ID;
terminal String     INT_LITERAL;      
terminal String     FLOAT_LITERAL;

/* Non terminals */
non terminal            header, function_list, function, program, command_list, command, assignment, 
                        declare_variable, write_statement, assignment_types, array_assignment_types,
                        read_statement, if_statement, else_part, for_statement, while_statement, 
                        parameter_list, parameter, return_function, return_type, function_call, 
                        call_parameter_list, call_parameter, return_function_type;
non terminal String     expr, tipo, vetor;      

/* Precedences */
precedence left EQUALS;
precedence left GREATER, LESS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LPAREN, RPAREN;
precedence left LBRACKET, RBRACKET; 
precedence left E, OU, NAO;

/* ----------------------Regras da Gramática---------------------- */

start with cabecalho;

header ::= {: emitirCabecalho(); :} program;

programa ::= function_list
             PROGRAM {: ESCOPO="MAIN"; emitirPrograma(); :}
             STARTPRG {: emitirInicioBloco(); :}
             command_list
             ENDPRG {: emitirFimBloco(); :};

function_list ::= function_list function | /* empty */;

function ::= PROCEDURE 
             return_type
             ID:name {: ESCOPO=name; System.out.print(name); :}
             LPAREN  {: System.out.print("("); :}
             parameter_list
             RPAREN  {: System.out.print(")"); :}
             STARTPRG {: emitirInicioBloco(); :}
             command_list
             ENDPRG   {: emitirFimBloco(); System.out.print("\n\n"); :}
             ;

parameter_list ::= parameter_list parameter| /* empty */;

parameter ::= tipo:t ID:id {: emitirDeclaracaoVariavel(id,t); COMMA {: System.out.print(", "); :}
            | tipo:t ID:id {: emitirDeclaracaoVariavel(id,t); :};
            
call_parameter_list::= call_parameter_list call_parameter | /* empty */;

call_parameter ::= expr:c {: emit_parametro_declaracao :} COMMA {: System.out.print(","); :}
                    | expr:c {: emit_parametro_declaracao :}
                    | VOID;

function_call ::= ID:i LPAREN {: indentarCodigo(pos); System.out.print(i + "("); :}
                   call_parameter_list
                   RPAREN {: System.out.print(")"); :}
                   SEMI {: emitirPontoEVirgula(); :};

return_function ::= RETURN {: indentarCodigo(pos); System.out.print("return "); :}
                   return_function_type
                   SEMI {: System.out.print(";\n"); :};

return_function_type ::= expr:e {: System.out.print(e); :}
                      | VOID
                      | ID:i lparen {: System.out.print(i + "("); :}
                        call_parameter_list
                        RPAREN {: System.out.print(")"); :};

command_list::= command_list command | /* empty */;

command ::= declare_variable 
          | assignment
          | read_statement
          | write_statement
          | if_statement
          | for_statement
          | while_statement 
          | return_function
          | function_call
          ;

/* Types */
type ::= DECLARE_INT:t   {: RESULT = "INT"; :}
       | DECLARE_FLOAT:t {: RESULT = "FLOAT"; :}
       ;

return_type ::= DECLARE_INT   {: RESULT = "INT"; System.out.print("int "); :}
              | DECLARE_FLOAT {: RESULT = "FLOAT"; System.out.print("float "); :}
              | VOID          {: RESULT = "VOID"; System.out.print("void "); :}
              ;

declaracao_variavel ::= tipo:t ID:id ASSIGN expr:value {: emitirDeclaracaoVariavelComAtribuicao(id, t, valor); :} SEMI {: emitirPontoEVirgula(); :}
                      | tipo:t ID:id {: emitirDeclaracaoVariavel(id, t); :} SEMI {: emitirPontoEVirgula(); :}
                      | tipo:t vetor {: emitirDeclaracaoVetor(t, pilhaAuxiliar.pop(), pilhaAuxiliar.pop()); pilhaAuxiliar.clear(); :} SEMI {: emitirPontoEVirgula(); :};

assignment ::= ID:id ASSIGN {: indentarCodigo(pos); System.out.print(id + " = "); :} tipos_atribuicao PONTO_VIRGULA {: emitirPontoEVirgula(); :}
             | vetor {: v1 = pilhaAuxiliar.pop(); v2 = pilhaAuxiliar.pop(); pilhaAuxiliar.clear(); :} ATRIBUIR {: indentarCodigo(pos); System.out.print(v1 + "[" + v2 + "] = "); :} tipos_atribuicao_vetor PONTO_VIRGULA {: emitirPontoEVirgula(); :};

tipos_atribuicao ::= expressao:valor {: System.out.print(valor); :}
                   | ID:i ABRE_PARENTESES {: System.out.print(i + "("); :} lista_parametros_chamada FECHA_PARENTESES {: System.out.print(")"); :};

tipos_atribuicao_vetor ::= expressao:e {: System.out.print(e); :}
                         | ID:i ABRE_PARENTESES {: System.out.print(i + "("); :} lista_parametros_chamada FECHA_PARENTESES {: System.out.print(")"); :};

comando_escreva ::= ESCREVA_LINHA expressao:valor {: emitirEscreva(valor); :} PONTO_VIRGULA {: emitirPontoEVirgula(); :};

comando_leia ::= LEIA_LINHA expressao:id {: emitirLeia(id); :} PONTO_VIRGULA {: emitirPontoEVirgula(); :};

comando_se ::= SE expressao:valor {: emitirSe(valor); :} ENTAO {: emitirInicioBloco(); :} lista_comandos parte_senao FIM_SENAO {: emitirFimBloco(); :};

parte_senao ::= SENAO {: emitirFimBloco(); emitirSenao(); emitirInicioBloco(); :} lista_comandos | /* empty */;

comando_para ::= PARA ID:id DE expressao:n1 ATE expressao:n2 PASSO expressao:n3 FACA {: emitirPara(id, n1, n2, n3); emitirInicioBloco(); :}
                 lista_comandos
                 FIM_PARA {: emitirFimBloco(); :};

comando_enquanto ::= ENQUANTO expressao:valor {: emitirEnquanto(valor); :} FACA {: emitirInicioBloco(); :}
                     lista_comandos
                     FIM_ENQUANTO {: emitirFimBloco(); :};

vetor ::= ID:i ABRE_COLCHETES LITERAL_INTEIRO:z FECHA_COLCHETES {: RESULT = i + "[" + z + "]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); :}
        | ID:i ABRE_COLCHETES expressao:z FECHA_COLCHETES {: RESULT = i + "[" + z + "]"; pilhaAuxiliar.push(z); pilhaAuxiliar.push(i); :};

expressao ::= expressao:e1 MAIS expressao:e2 {: RESULT = e1 + " + " + e2; :}
            | expressao:e1 MENOS expressao:e2 {: RESULT = e1 + " - " + e2; :}
            | expressao:e1 VEZES expressao:e2 {: RESULT = e1 + " * " + e2; :}
            | expressao:e1 DIVIDIR expressao:e2 {: RESULT = e1 + " / " + e2; :}
            | expressao:e1 IGUAL expressao:e2 {: RESULT = e1 + " == " + e2; :}
            | expressao:e1 MAIOR expressao:e2 {: RESULT = e1 + " > " + e2; :}
            | expressao:e1 MENOR expressao:e2 {: RESULT = e1 + " < " + e2; :}
            | expressao:e1 E expressao:e2 {: RESULT = e1 + " && " + e2; :}
            | expressao:e1 OU expressao:e2 {: RESULT = e1 + " || " + e2; :}
            | NAO expressao:e1 {: RESULT = "!" + e1; :}
            | MENOS expressao:e1 {: RESULT = "-" + e1; :}
            | ABRE_PARENTESES expressao:e1 FECHA_PARENTESES {: RESULT = "(" + e1 + ")"; :}
            | ID:i {: RESULT = i; verificarExpr(i, null); :}
            | LITERAL_INTEIRO:n {: RESULT = n; :}
            | LITERAL_REAL:n {: RESULT = n; :}
            | vetor:v {: RESULT = v; :};