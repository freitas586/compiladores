
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\020\002\000\002\021\002\000\002\002" +
    "\010\000\002\002\004\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\016\003\000\002\016\003\000\002\022" +
    "\002\000\002\006\010\000\002\023\002\000\002\006\006" +
    "\000\002\024\002\000\002\005\007\000\002\025\002\000" +
    "\002\007\006\000\002\026\002\000\002\010\006\000\002" +
    "\027\002\000\002\030\002\000\002\011\012\000\002\031" +
    "\002\000\002\012\005\000\002\012\002\000\002\032\002" +
    "\000\002\013\016\000\002\033\002\000\002\034\002\000" +
    "\002\014\011\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\035\002\000\002\015\006\000" +
    "\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\017\005\001\002\000\004\002\143\001" +
    "\002\000\004\020\001\001\002\000\004\020\007\001\002" +
    "\000\024\021\000\022\000\023\000\024\000\025\000\031" +
    "\000\037\000\045\000\047\000\001\002\000\024\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037\ufffc\045" +
    "\ufffc\047\ufffc\001\002\000\024\021\027\022\012\023\023" +
    "\024\024\025\013\031\026\037\016\045\033\047\017\001" +
    "\002\000\014\010\040\030\035\047\034\050\036\051\037" +
    "\001\002\000\004\047\ufff3\001\002\000\004\047\131\001" +
    "\002\000\034\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\031\ufffd\034\ufffd\035\ufffd\037\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\001\002\000\004\047\116\001\002\000\004" +
    "\036\112\001\002\000\034\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\031\ufff7\034\ufff7\035\ufff7\037\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\001\002\000\034\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\031\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002\000" +
    "\034\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\031\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\001\002\000\014\010\040\030\035\047\034\050\036" +
    "\051\037\001\002\000\004\047\ufff4\001\002\000\034\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\031\ufffa\034\ufffa" +
    "\035\ufffa\037\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\001" +
    "\002\000\014\010\040\030\035\047\034\050\036\051\037" +
    "\001\002\000\004\002\uffff\001\002\000\034\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\031\ufff6\034\ufff6\035\ufff6" +
    "\037\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002\000" +
    "\034\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\031\ufff9" +
    "\034\ufff9\035\ufff9\037\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\001\002\000\034\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\031\ufff8\034\ufff8\035\ufff8\037\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\001\002\000\014\010\040\030\035" +
    "\047\034\050\036\051\037\001\002\000\034\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\026\uffd1\027\uffd1\032\uffd1\033\uffd1\043\uffd1\001\002\000" +
    "\014\010\040\030\035\047\034\050\036\051\037\001\002" +
    "\000\034\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\026\uffd0\027\uffd0\032\uffd0\033\uffd0" +
    "\043\uffd0\001\002\000\034\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\014\uffcf\015\uffcf\016\uffcf\026\uffcf\027\uffcf" +
    "\032\uffcf\033\uffcf\043\uffcf\001\002\000\014\010\040\030" +
    "\035\047\034\050\036\051\037\001\002\000\026\004\045" +
    "\005\042\006\047\007\043\014\051\015\044\016\046\026" +
    "\053\027\050\043\uffe0\001\002\000\014\010\040\030\035" +
    "\047\034\050\036\051\037\001\002\000\014\010\040\030" +
    "\035\047\034\050\036\051\037\001\002\000\014\010\040" +
    "\030\035\047\034\050\036\051\037\001\002\000\014\010" +
    "\040\030\035\047\034\050\036\051\037\001\002\000\014" +
    "\010\040\030\035\047\034\050\036\051\037\001\002\000" +
    "\014\010\040\030\035\047\034\050\036\051\037\001\002" +
    "\000\014\010\040\030\035\047\034\050\036\051\037\001" +
    "\002\000\014\010\040\030\035\047\034\050\036\051\037" +
    "\001\002\000\004\043\055\001\002\000\014\010\040\030" +
    "\035\047\034\050\036\051\037\001\002\000\034\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\026\uffd6\027\uffd6\032\uffd6\033\uffd6\043\uffd6\001\002" +
    "\000\024\022\uffdf\023\uffdf\024\uffdf\025\uffdf\031\uffdf\037" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\001\002\000\024\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\001\002\000\024\022\012\023\023\024\024" +
    "\025\013\031\026\037\016\045\033\046\060\047\017\001" +
    "\002\000\034\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\031\uffde\034\uffde\035\uffde\037\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\001\002\000\034\004\045\005\042\006\047" +
    "\007\043\011\uffd9\014\uffd9\015\044\016\046\026\053\027" +
    "\050\032\uffd9\033\uffd9\043\uffd9\001\002\000\034\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\026\uffd5\027\uffd5\032\uffd5\033\uffd5\043\uffd5\001\002" +
    "\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\026\053\027\050\032\uffdb\033\uffdb" +
    "\043\uffdb\001\002\000\034\004\045\005\042\006\047\007" +
    "\043\011\uffd7\014\uffd7\015\uffd7\016\uffd7\026\053\027\050" +
    "\032\uffd7\033\uffd7\043\uffd7\001\002\000\034\004\uffdd\005" +
    "\uffdd\006\047\007\043\011\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\026\053\027\050\032\uffdd\033\uffdd\043\uffdd\001\002\000" +
    "\034\004\045\005\042\006\047\007\043\011\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\026\053\027\050\032\uffd8\033\uffd8\043" +
    "\uffd8\001\002\000\034\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\011\uffda\014\uffda\015\uffda\016\uffda\026\053\027\050\032" +
    "\uffda\033\uffda\043\uffda\001\002\000\034\004\uffdc\005\uffdc" +
    "\006\047\007\043\011\uffdc\014\uffdc\015\uffdc\016\uffdc\026" +
    "\053\027\050\032\uffdc\033\uffdc\043\uffdc\001\002\000\026" +
    "\004\045\005\042\006\047\007\043\011\uffd3\014\051\015" +
    "\044\016\046\026\053\027\050\001\002\000\004\011\073" +
    "\001\002\000\034\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\026\uffd2\027\uffd2\032\uffd2" +
    "\033\uffd2\043\uffd2\001\002\000\034\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\014\uffd4\015\uffd4\016\uffd4\026\uffd4" +
    "\027\uffd4\032\uffd4\033\uffd4\043\uffd4\001\002\000\026\004" +
    "\045\005\042\006\047\007\043\014\051\015\044\016\046" +
    "\026\053\027\050\033\uffe8\001\002\000\004\033\077\001" +
    "\002\000\026\022\uffe7\023\uffe7\024\uffe7\025\uffe7\031\uffe7" +
    "\034\uffe7\035\uffe7\037\uffe7\045\uffe7\047\uffe7\001\002\000" +
    "\026\022\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\034\ufffc" +
    "\035\ufffc\037\ufffc\045\ufffc\047\ufffc\001\002\000\026\022" +
    "\012\023\023\024\024\025\013\031\026\034\103\035\uffe3" +
    "\037\016\045\033\047\017\001\002\000\004\035\106\001" +
    "\002\000\024\022\uffe5\023\uffe5\024\uffe5\025\uffe5\031\uffe5" +
    "\035\uffe5\037\uffe5\045\uffe5\047\uffe5\001\002\000\024\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\031\ufffc\035\ufffc\037\ufffc" +
    "\045\ufffc\047\ufffc\001\002\000\024\022\012\023\023\024" +
    "\024\025\013\031\026\035\uffe4\037\016\045\033\047\017" +
    "\001\002\000\034\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\031\uffe6\034\uffe6\035\uffe6\037\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\001\002\000\026\004\045\005\042\006" +
    "\047\007\043\014\051\015\044\016\046\026\053\027\050" +
    "\032\uffec\001\002\000\004\032\111\001\002\000\034\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\031\uffeb\034\uffeb" +
    "\035\uffeb\037\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001" +
    "\002\000\014\010\040\030\035\047\034\050\036\051\037" +
    "\001\002\000\026\004\045\005\042\006\047\007\043\014" +
    "\051\015\044\016\046\026\053\027\050\032\uffee\001\002" +
    "\000\004\032\115\001\002\000\034\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\031\uffed\034\uffed\035\uffed\037\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\001\002\000\004\040" +
    "\117\001\002\000\004\050\120\001\002\000\004\041\121" +
    "\001\002\000\004\050\122\001\002\000\004\042\123\001" +
    "\002\000\004\050\124\001\002\000\004\043\125\001\002" +
    "\000\024\022\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\037" +
    "\uffe2\044\uffe2\045\uffe2\047\uffe2\001\002\000\024\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037\ufffc\044\ufffc\045" +
    "\ufffc\047\ufffc\001\002\000\024\022\012\023\023\024\024" +
    "\025\013\031\026\037\016\044\130\045\033\047\017\001" +
    "\002\000\034\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\031\uffe1\034\uffe1\035\uffe1\037\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\001\002\000\006\032\ufff0\036\133\001\002" +
    "\000\004\032\137\001\002\000\014\010\040\030\035\047" +
    "\034\050\036\051\037\001\002\000\026\004\045\005\042" +
    "\006\047\007\043\014\051\015\044\016\046\026\053\027" +
    "\050\032\ufff2\001\002\000\004\032\136\001\002\000\034" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1\034" +
    "\ufff1\035\ufff1\037\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\001\002\000\034\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\031\uffef\034\uffef\035\uffef\037\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\001\002\000\026\004\045\005\042\006" +
    "\047\007\043\014\051\015\044\016\046\026\053\027\050" +
    "\032\uffea\001\002\000\004\032\142\001\002\000\034\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\037\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\020\005\001\001\000\002\001\001\000\004\021\007" +
    "\001\001\000\004\003\010\001\001\000\024\004\014\005" +
    "\024\006\020\007\031\010\030\011\017\013\027\014\021" +
    "\016\013\001\001\000\004\015\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\040\001\001\000\002\001\001\000\004\015" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\070\001\001\000\004\033\051\001\001\000\004\015" +
    "\067\001\001\000\004\015\066\001\001\000\004\015\065" +
    "\001\001\000\004\015\064\001\001\000\004\015\063\001" +
    "\001\000\004\015\062\001\001\000\004\015\061\001\001" +
    "\000\004\015\060\001\001\000\002\001\001\000\004\015" +
    "\053\001\001\000\002\001\001\000\004\034\055\001\001" +
    "\000\004\003\056\001\001\000\024\004\014\005\024\006" +
    "\020\007\031\010\030\011\017\013\027\014\021\016\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\075\001\001\000\002\001" +
    "\001\000\004\030\077\001\001\000\004\003\100\001\001" +
    "\000\026\004\014\005\024\006\020\007\031\010\030\011" +
    "\017\012\101\013\027\014\021\016\013\001\001\000\002" +
    "\001\001\000\004\031\103\001\001\000\004\003\104\001" +
    "\001\000\024\004\014\005\024\006\020\007\031\010\030" +
    "\011\017\013\027\014\021\016\013\001\001\000\002\001" +
    "\001\000\004\025\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\112\001\001\000\004\024\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\125\001\001\000\004\003\126\001\001\000\024\004" +
    "\014\005\024\006\020\007\031\010\030\011\017\013\027" +
    "\014\021\016\013\001\001\000\002\001\001\000\004\023" +
    "\131\001\001\000\002\001\001\000\004\015\133\001\001" +
    "\000\004\022\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    class TabelaSimbolo {

       private String tipo;
       private boolean EhVetor;
      
     
      TabelaSimbolo(String tipo,boolean EhVetor){
          this.tipo = tipo;  
          this.EhVetor = EhVetor;
      }

       public String getTipo(){
          return tipo;
       }

       public boolean getEhVetor() {
          return EhVetor;
       }
  }

  
  private Hashtable<String,TabelaSimbolo> dicionario = new Hashtable<String,TabelaSimbolo>();
  private int pos = 0;

  /* emitir código C */

    public void emit_program(){
       System.out.print("#include <stdio.h>\n");
       System.out.print("#include <stdlib.h>\n");
       System.out.print("\nint main()");
    }

    public void emit_startblock(){
       System.out.print("{");
       format_code(pos++);
       System.out.print("\n");

    }

 
     public void emit_endblock(){
       format_code(--pos);
       System.out.print("}");
       System.out.print("\n");
       
    }

     public void emit_return(){
       format_code(pos); 
       System.out.print("return 0;\n");

    }

    public void emit_semi(){
        System.out.print(";\n");
    }
                                                                
    public void emit_declaracao_variavel_com_atribuicao(String id, String tipo, String value){

       format_code(pos); 

       if(dicionario.containsKey(id)){
        report_fatal_error("Variável duplicada [" + id + "]",null);
       }
        else {  
        if(tipo.equals("INT")) {
            System.out.print("int " + id + "=" + value);
        } else {
            System.out.print("float " + id + "=" + value);
        }

        dicionario.put(id, new TabelaSimbolo(tipo,false));                                  
       }
    }

    public void emit_declaracao_variavel(String id, String tipo){

      format_code(pos); 

      if(dicionario.containsKey(id)){
        report_fatal_error("Variável duplicada [" + id + "]",null);
      } else {  
        if(tipo.equals("INT")) {
            System.out.print("int " + id);
        } else {
            System.out.print("float " + id);
        }

        dicionario.put(id, new TabelaSimbolo(tipo,false));
      }
    }

    public void emit_atribuicao(String id, String value){

        format_code(pos); 

        if(! dicionario.containsKey(id)){
            report_fatal_error("Variável não declarada [" + id + "]",null);
        }
        System.out.print(id + "=" + value); 
    }

    public void emit_escreva(String id){

        format_code(pos);  

     TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Variável não declarada [" + id + "]",null);
      }  

      String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
           System.out.print("printf(\"\\n%d\"," + id + ")") ;
         } else {
            System.out.print("printf(\"\\n%f\"," + id + ")") ;
         }   
      }

    public void emit_leia(String id){

       format_code(pos);   

      TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Variável não declarada [" + id + "]",null);
      }    

        String tipo = t1.getTipo();

         if(tipo.equals("INT")) {
            System.out.print("scanf(\"%d\",&" + id + ")") ;
         } else {
            System.out.print("scanf(\"%f\",&" + id + ")");
         }   
      }

    public void emit_if(String value){
           format_code(pos); 
           
         System.out.print("if("+ value +")");
    }

    public void emit_else(){

           format_code(pos); 

         System.out.print("else");
    }

    public void emit_for(String id, String n1, String n2, String n3){

      format_code(pos); 
      TabelaSimbolo t1 = dicionario.get(id);  
      if(t1 == null) {
         report_fatal_error("Variável não declarada [" + id + "]",null);
      }    

         System.out.print("for("+ id +" = "+ n1 +";"+ id +" < "+ n2 +";"+ id+ " += "+ n3 +")");
      
    }

   public void emit_while(String value){
        format_code(pos); 
         TabelaSimbolo t1 = dicionario.get(value);  
      if(t1 == null) {
         report_fatal_error("Variável não declarada [" + value + "]",null);
      }   
       System.out.print("while("+value+")");
    }

    /* métodos auxiliares */
    public String checkExpr(String e1, String e2){   
        String tipoE1 = "", tipoE2 = "";                                                      

        if(e1 != null){
            TabelaSimbolo t1 = dicionario.get(e1);  

             if(t1 == null) {
                 report_fatal_error("Variável não declarada [" + e1 + "]",null);
                }

            tipoE1 = t1.getTipo();    
        

            if(e2 != null){
                TabelaSimbolo t2 = dicionario.get(e2);  
                if(t2 == null) {
                 report_fatal_error("Variável não declarada [" + e2 + "]",null);
                }

                tipoE2 = t2.getTipo(); 
            }

        }

        if(! tipoE2.equals("")){

            if(! tipoE1.equals(tipoE2)){
                report_fatal_error("Linguagem não permite operações com tipos diferentes !",null);
            }
        }

        return tipoE1;
    }

     public void format_code(int pos){
       for(int i=0; i < pos * 3; i++){
          System.out.print(" ");  
       }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 emit_program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_startblock();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM NT$0 STARTPRG NT$1 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_endblock() ;            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_command ::= list_command command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_command ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= declare_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= readl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= writel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= DECLINT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "INT"  ;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= DECLFLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "FLOAT";     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel_com_atribuicao(id,  t,  value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declare_variable ::= tipo ID ATTRIB expr NT$2 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declaracao_variavel(id,t);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declare_variable ::= tipo ID NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_atribuicao(id,value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign ::= ID ATTRIB expr NT$4 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_escreva(value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // writel ::= WRITELINE expr NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_leia(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // readl ::= READLINE expr NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_if(value);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IFF expr NT$7 THENN NT$8 list_command elsepart ENDELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 emit_endblock();       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$9 ::= 
            {
              Object RESULT =null;
 emit_endblock(); emit_else(); emit_startblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elsepart ::= ELSEE NT$9 list_command 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elsepart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsepart",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 emit_for(id,n1,n2,n3); emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for ::= PARA ID DE INTT ATE INTT PASSO INTT FACA NT$10 list_command FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_while(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 emit_startblock();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while ::= ENQUANTO expr NT$11 FACA NT$12 list_command FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  emit_endblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "+" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "-" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "*" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "/" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr EQUALS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "==" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + ">" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "<" + e2;  dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr E expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "&&" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr OU expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "||" + e2; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,e2),false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NAO expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "!" + e1;    ;                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$13 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT =  "(" + e1  + ")"; dicionario.put(RESULT,new TabelaSimbolo(checkExpr(e1,null),false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAREN expr NT$13 RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;  /* detectar variavel nao declarada */ checkExpr(i,null);             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= INTT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("INT",false));               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= FLOATT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  dicionario.put(RESULT,new TabelaSimbolo("FLOAT",false));             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
